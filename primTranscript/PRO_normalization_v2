#! /bin/sh

# modified from original code as file names are different: https://github.com/guertinlab/Nascent_RNA_Methods/blob/main/PRO_normalization

# put this in your path: normalize_bedGraph.py
# put this executable in your path: normalization_factor.R

# where normalization_factor.R resides.
set -e

export PATH=${PATH}:/home/FCAM/rmukherjee/Summer2022Rotation/R_files


while getopts "c:" OPTION
do
    case $OPTION in
	c)
	    chrSizes=$OPTARG
	    ;;
	
    esac
done

echo "\nPrior to running PRO_normalization, you need to install the following dependencies:\nnormalize_bedGraph.py https://raw.githubusercontent.com/guertinlab/Nascent_RNA_Methods/main/normalize_bedGraph.py\nnormalization_factor.R https://raw.githubusercontent.com/guertinlab/Nascent_RNA_Methods/main/normalization_factor.R\nbedGraphToBigWig: UCSC tools\nbigWigToBedGraph: UCSC tools\nDon't forget to put these dependencies in your PATH and make them executable using chmod +x\nPRO_normalization assumes the naming convention CELL_COND_TIME_ETC_rep<#>_<plus><minus>.bigWig\nand assumes that you are running the script in the directory with your bigWigs \nPRO_normalization usage:\n  PRO_normalization -c hg38.chrom.sizes \n\n-c is the genome sizes file that can be downloaded from UCSC\n "

### bigWig files are binary files so they need to be converted to individual bedgraphs and normalized based on number of reads.
# steps in the code outlined below:-
# 1. convert individual bigWigs from each replicates into a bedgraph for normalisation
# 2. use normalize_bedgraph.py to normalize each of the bedgraphs generated in (1) by (mean*basesCovered) scaled to 1e7.
# 3. convert the normalized bedgraphs in (2) to bigWig files for each replicates.
# 4. for each condition, merge all plus bigWigs for replicates (created in (3)) into one. Similarly merge all minus bigWigs to one.
# 5. convert merged bigwigs to bedgraph files for each condition and again normalise bedgraph files using 1/numReplicates ("scaleall") parameter
# 6. convert the normalized merged bedgraph files to bigWig files
# 7. remove all intermediate files and keep bigWig files created in (6).
# msterious as to why individual replicates are normalised and then the merged bigwig files are normalized.
# points about normalized_bedraph.py
#  - it simply takes the counts in each row and multiplies it with the scale factor passed to the function.
bigWigFilesDir=/home/FCAM/rmukherjee/Spring2022Rotation/proseqfiles
cd ${bigWigFilesDir}

if [ $chrSizes ]; then

normalization_factor_v2.R # modified version of normalization_factor.R

for i in *rep1*plus*PE1.bigWig # name modified
do
    name=$(echo $i | awk -F"_rep1_plus_PE1.bigWig" '{print $1}') # name modified
    if [[ "${name}" == "Macrophages_apoptotic_45min" ]]; then # already done
       continue
    fi 
    printf "%s - processing individual replicates\n" ${name}
    basename=$(echo $i | awk -F"_" '{print $1}') # could be problematic as basename is same for all conditions
    # count the number of replicates
    reps=$(ls ${name}_rep*_plus_PE1.bigWig | wc -w | bc) # modified name
    #echo $reps
    for j in ${name}_rep*_plus_PE1.bigWig # name modified
    	do
    		repNum=$(echo $j | awk -F"rep" '{print $NF}' | awk -F"_plus" '{print $1}') # take the num# of replicate	
    		#echo $repNum
                # names of bigWig modified in next two lines. Selecting normalisation factors for files.
                # *_normalization.txt has been created by normalization_factor_PRO.R and contails mean*basesCovered as values against different files
    		invscalePlus=$(grep "${name}_rep${repNum}_plus_PE1.bigWig" ${basename}_normalization.txt | awk -F" " '{print $2}' | bc)
    		invscaleMinus=$(grep "${name}_rep${repNum}_minus_PE1.bigWig" ${basename}_normalization.txt | awk -F" " '{print $2}' | bc)
    		echo $invscalePlus
    		echo $invscaleMinus
    		# scale to 10 million
    		invScale=$(expr $invscalePlus + $invscaleMinus)
    		scale=$(bc <<< "scale=3 ; 10000000 / $invScale") # normalised to 1e7 reads
    		#scaleMinus=$(bc <<< "scale=3 ; 10000000 / $invscaleMinus")
    		#echo $scalePlus
    		#echo $scaleMinus
                # modifying names in six subsequent lines
    		bigWigToBedGraph ${name}_rep${repNum}_plus_PE1.bigWig ${name}_rep${repNum}_plus_PE1.bedGraph
    		bigWigToBedGraph ${name}_rep${repNum}_minus_PE1.bigWig ${name}_rep${repNum}_minus_PE1.bedGraph
    		normalize_bedGraph_v2.py -i ${name}_rep${repNum}_plus_PE1.bedGraph -s $scale -o ${name}_rep${repNum}_plus_PE1_normalized.bedGraph
    		normalize_bedGraph_v2.py -i ${name}_rep${repNum}_minus_PE1.bedGraph -s $scale -o ${name}_rep${repNum}_minus_PE1_normalized.bedGraph
    		bedGraphToBigWig ${name}_rep${repNum}_plus_PE1_normalized.bedGraph $chrSizes ${name}_rep${repNum}_plus_PE1_normalized.bigWig 
    		bedGraphToBigWig ${name}_rep${repNum}_minus_PE1_normalized.bedGraph $chrSizes ${name}_rep${repNum}_minus_PE1_normalized.bigWig 
    	done
    printf "%s - creating and merging normalized replicate bigWigs\n" ${name}
    plusfiles=$(ls ${name}_rep*_plus_PE1_normalized.bigWig)
    bigWigMerge $plusfiles tmpPlus.bg
    minusfiles=$(ls ${name}_rep*_minus_PE1_normalized.bigWig)
    bigWigMerge -threshold=-10000000000 $minusfiles tmpMinus.bg # for bigWigMerge utility: -threshold=0.N - don't output values at or below this threshold. Default is 0.0
    scaleall=$(bc <<< "scale=4 ; 1.0 / $reps")
    normalize_bedGraph_v2.py -i tmpPlus.bg -s $scaleall -o ${name}_plus_PE1_normalized.bg # scaleall=1/rep#
    normalize_bedGraph_v2.py -i tmpMinus.bg -s $scaleall -o ${name}_minus_PE1_normalized.bg
    sort -k1,1 -k2,2n ${name}_plus_PE1_normalized.bg > ${name}_plus_PE1_normalized_sorted.bg
    sort -k1,1 -k2,2n ${name}_minus_PE1_normalized.bg > ${name}_minus_PE1_normalized_sorted.bg
    bedGraphToBigWig ${name}_plus_PE1_normalized_sorted.bg $chrSizes ${name}_plus_PE1_normalized.bigWig 
    bedGraphToBigWig ${name}_minus_PE1_normalized_sorted.bg $chrSizes ${name}_minus_PE1_normalized.bigWig   
    rm ${name}_plus_PE1_normalized.bg
    rm ${name}_minus_PE1_normalized.bg
    rm ${name}_plus_PE1_normalized_sorted.bg
    rm ${name}_minus_PE1_normalized_sorted.bg
    rm tmpPlus.bg
    rm tmpMinus.bg
done

fi

